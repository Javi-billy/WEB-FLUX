package com.cqrs.pattern.es.controller;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.cqrs.pattern.cqrs.aggregates.UserAggregate;
import com.cqrs.pattern.cqrs.commands.CreateUserCommand;
import com.cqrs.pattern.cqrs.commands.UpdateUserCommand;
import com.cqrs.pattern.cqrs.projections.UserProjection;
import com.cqrs.pattern.cqrs.projectors.UserProjector;
import com.cqrs.pattern.cqrs.queries.AddressByRegionQuery;
import com.cqrs.pattern.cqrs.repository.UserReadRepository;
import com.cqrs.pattern.cqrs.repository.UserWriteRepository;
import com.cqrs.pattern.domain.Address;
import com.cqrs.pattern.domain.Contact;
import com.cqrs.pattern.domain.User;
import com.cqrs.pattern.es.events.Event;
import com.cqrs.pattern.es.repository.EventStore;
import com.cqrs.pattern.es.service.UserService;


@RestController
public class CqrsController {	
	
	private EventStore repository = new EventStore();
	private UserWriteRepository uwr = new UserWriteRepository();
	private UserReadRepository urr = new UserReadRepository();
	private UserService us = new UserService(repository); 
	private UserProjector up = new UserProjector(urr);
	 
	//private UserReadRepository readRepository = new UserReadRepository();
		
	@PostMapping(value = "/createUser")
	public String createUser(@RequestBody String idUser) throws Exception {
		
		UserAggregate ua = new UserAggregate(uwr);
		User user = ua.handleCreateUserCommand(new CreateUserCommand(idUser,"prueba","otro"));
			
		up.project(user);
		
		return user.getUserid();
	}
	
	@PutMapping(value = "/updateUser")
	public String updateUser(@RequestBody String idUser) throws Exception {
		
		UserAggregate ua = new UserAggregate(uwr);
		
		Set<Contact> contacts = new HashSet<>();
		Set<Address> addresses = new HashSet<>();
		
		Contact contact = new Contact("T","647412588");
		contacts.add(contact);
		Address address = new Address("Madrid","Espania","28016"); 
		addresses.add(address);		
		
		User user = ua.handleUpdateUserCommand(new UpdateUserCommand(idUser,addresses,contacts));
		
		up.project(user);
		return user.getUserid();
	}
	
	@GetMapping(value = "/addresses/{id}")
	public Set<Address> readAddress(@PathVariable(value = "id") String id) throws Exception {
		UserProjection upr = new UserProjection(urr); 
		return upr.handle(new AddressByRegionQuery(id, "Espania"));
	}
	
	@GetMapping(value = "/contacts/{id}")
	public Set<Contact> readContacts(@PathVariable(value = "id") String id) throws Exception {
		Set<Contact> contact = us.getContactByType(id, "T");
		return contact;
	}
	
	@GetMapping(value = "/read-contact/{id}")
	public Set<Contact> readContact(@PathVariable(value = "id") String id) throws Exception {
		Set<Contact> contact = us.getContactByType(id, "T");
		return contact;
	}
	
	/*@PostMapping(value = "/create")
	public User create(@RequestBody String idUser) throws Exception {
		
		
		Set<Contact> contacts = new HashSet<>();
		Set<Address> addresses = new HashSet<>();
		
		Contact contact = new Contact("T","647412588");
		contacts.add(contact);
		Address address = new Address("Madrid","Espania","28016"); 
		addresses.add(address);		
		//String idUser = UUID.randomUUID().toString();
		User user = new User(idUser,"prueba","otro",contacts,addresses);
		
		//UserService us = new UserService(new EventStore()); 
		us.createUser(idUser,"prueba","otro");
		us.updateUser(idUser, contacts, addresses);
        System.out.println("usuario creado");        
        up.project(user);
		return user;
	}
	
	*/
	
}
